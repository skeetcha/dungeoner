                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.4.1 #14650 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module encounter
                                      6 	.optsdcc -msm83
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _calloc
                                     12 	.globl _rand_range
                                     13 	.globl _generate_encounter
                                     14 ;--------------------------------------------------------
                                     15 ; special function registers
                                     16 ;--------------------------------------------------------
                                     17 ;--------------------------------------------------------
                                     18 ; ram data
                                     19 ;--------------------------------------------------------
                                     20 	.area _DATA
                                     21 ;--------------------------------------------------------
                                     22 ; ram data
                                     23 ;--------------------------------------------------------
                                     24 	.area _INITIALIZED
                                     25 ;--------------------------------------------------------
                                     26 ; absolute external ram data
                                     27 ;--------------------------------------------------------
                                     28 	.area _DABS (ABS)
                                     29 ;--------------------------------------------------------
                                     30 ; global & static initialisations
                                     31 ;--------------------------------------------------------
                                     32 	.area _HOME
                                     33 	.area _GSINIT
                                     34 	.area _GSFINAL
                                     35 	.area _GSINIT
                                     36 ;--------------------------------------------------------
                                     37 ; Home
                                     38 ;--------------------------------------------------------
                                     39 	.area _HOME
                                     40 	.area _HOME
                                     41 ;--------------------------------------------------------
                                     42 ; code
                                     43 ;--------------------------------------------------------
                                     44 	.area _CODE
                                     45 ;src/encounter.c:8: Monster* generate_encounter(UBYTE difficulty) {
                                     46 ;	---------------------------------
                                     47 ; Function generate_encounter
                                     48 ; ---------------------------------
    00000000                         49 _generate_encounter::
    00000000 E8 FA            [16]   50 	add	sp, #-6
    00000002 4F               [ 4]   51 	ld	c, a
                                     52 ;src/encounter.c:9: unsigned int monster_num = 0;
    00000003 AF               [ 4]   53 	xor	a, a
    00000004 F8 00            [12]   54 	ldhl	sp,	#0
    00000006 22               [ 8]   55 	ld	(hl+), a
    00000007 77               [ 8]   56 	ld	(hl), a
                                     57 ;src/encounter.c:11: switch (difficulty) {
    00000008 3E 04            [ 8]   58 	ld	a, #0x04
    0000000A 91               [ 4]   59 	sub	a, c
    0000000B 38 4F            [12]   60 	jr	C, 00106$
    0000000D 06 00            [ 8]   61 	ld	b, #0x00
    0000000F 21r16r00         [12]   62 	ld	hl, #00135$
    00000012 09               [ 8]   63 	add	hl, bc
    00000013 09               [ 8]   64 	add	hl, bc
    00000014 09               [ 8]   65 	add	hl, bc
    00000015 E9               [ 4]   66 	jp	(hl)
    00000016                         67 00135$:
    00000016 C3r25r00         [16]   68 	jp	00101$
    00000019 C3r2Er00         [16]   69 	jp	00102$
    0000001C C3r37r00         [16]   70 	jp	00103$
    0000001F C3r44r00         [16]   71 	jp	00104$
    00000022 C3r51r00         [16]   72 	jp	00105$
                                     73 ;src/encounter.c:12: case DIFFICULTY_TRIVIAL:
    00000025                         74 00101$:
                                     75 ;src/encounter.c:13: monster_num = 2;
    00000025 F8 00            [12]   76 	ldhl	sp,	#0
    00000027 3E 02            [ 8]   77 	ld	a, #0x02
    00000029 22               [ 8]   78 	ld	(hl+), a
    0000002A AF               [ 4]   79 	xor	a, a
    0000002B 77               [ 8]   80 	ld	(hl), a
                                     81 ;src/encounter.c:14: break;
    0000002C 18 2E            [12]   82 	jr	00106$
                                     83 ;src/encounter.c:15: case DIFFICULTY_LOW:
    0000002E                         84 00102$:
                                     85 ;src/encounter.c:16: monster_num = 3;
    0000002E F8 00            [12]   86 	ldhl	sp,	#0
    00000030 3E 03            [ 8]   87 	ld	a, #0x03
    00000032 22               [ 8]   88 	ld	(hl+), a
    00000033 AF               [ 4]   89 	xor	a, a
    00000034 77               [ 8]   90 	ld	(hl), a
                                     91 ;src/encounter.c:17: break;
    00000035 18 25            [12]   92 	jr	00106$
                                     93 ;src/encounter.c:18: case DIFFICULTY_MODERATE:
    00000037                         94 00103$:
                                     95 ;src/encounter.c:19: monster_num = rand_range(4, 5);
    00000037 01 05 00         [12]   96 	ld	bc, #0x0005
    0000003A 11 04 00         [12]   97 	ld	de, #0x0004
    0000003D CDr00r00         [24]   98 	call	_rand_range
    00000040 E1               [12]   99 	pop	hl
    00000041 C5               [16]  100 	push	bc
                                    101 ;src/encounter.c:20: break;
    00000042 18 18            [12]  102 	jr	00106$
                                    103 ;src/encounter.c:21: case DIFFICULTY_SEVERE:
    00000044                        104 00104$:
                                    105 ;src/encounter.c:22: monster_num = rand_range(6, 7);
    00000044 01 07 00         [12]  106 	ld	bc, #0x0007
    00000047 11 06 00         [12]  107 	ld	de, #0x0006
    0000004A CDr00r00         [24]  108 	call	_rand_range
    0000004D E1               [12]  109 	pop	hl
    0000004E C5               [16]  110 	push	bc
                                    111 ;src/encounter.c:23: break;
    0000004F 18 0B            [12]  112 	jr	00106$
                                    113 ;src/encounter.c:24: case DIFFICULTY_EXTREME:
    00000051                        114 00105$:
                                    115 ;src/encounter.c:25: monster_num = rand_range(8, 9);
    00000051 01 09 00         [12]  116 	ld	bc, #0x0009
    00000054 11 08 00         [12]  117 	ld	de, #0x0008
    00000057 CDr00r00         [24]  118 	call	_rand_range
    0000005A E1               [12]  119 	pop	hl
    0000005B C5               [16]  120 	push	bc
                                    121 ;src/encounter.c:27: }
    0000005C                        122 00106$:
                                    123 ;src/encounter.c:29: Monster* monsters = (Monster*)calloc(monster_num, sizeof(Monster));
    0000005C 01 14 00         [12]  124 	ld	bc, #0x0014
    0000005F D1               [12]  125 	pop	de
    00000060 D5               [16]  126 	push	de
    00000061 CDr00r00         [24]  127 	call	_calloc
    00000064 F8 02            [12]  128 	ldhl	sp,	#2
    00000066 79               [ 4]  129 	ld	a, c
    00000067 22               [ 8]  130 	ld	(hl+), a
                                    131 ;src/encounter.c:31: for (int i = 0; i < monster_num; i++) {
    00000068 78               [ 4]  132 	ld	a, b
    00000069 22               [ 8]  133 	ld	(hl+), a
    0000006A AF               [ 4]  134 	xor	a, a
    0000006B 22               [ 8]  135 	ld	(hl+), a
    0000006C 77               [ 8]  136 	ld	(hl), a
    0000006D                        137 00109$:
    0000006D F8 04            [12]  138 	ldhl	sp,	#4
    0000006F 2A               [ 8]  139 	ld	a, (hl+)
    00000070 4F               [ 4]  140 	ld	c, a
    00000071 46               [ 8]  141 	ld	b, (hl)
    00000072 F8 00            [12]  142 	ldhl	sp,	#0
    00000074 79               [ 4]  143 	ld	a, c
    00000075 96               [ 8]  144 	sub	a, (hl)
    00000076 23               [ 8]  145 	inc	hl
    00000077 78               [ 4]  146 	ld	a, b
    00000078 9E               [ 8]  147 	sbc	a, (hl)
    00000079 30 29            [12]  148 	jr	NC, 00107$
                                    149 ;src/encounter.c:32: monsters[i] = goblin;
    0000007B F8 04            [12]  150 	ldhl	sp,#4
    0000007D 2A               [ 8]  151 	ld	a, (hl+)
    0000007E 4F               [ 4]  152 	ld	c, a
    0000007F 46               [ 8]  153 	ld	b, (hl)
    00000080 69               [ 4]  154 	ld	l, c
    00000081 60               [ 4]  155 	ld	h, b
    00000082 29               [ 8]  156 	add	hl, hl
    00000083 29               [ 8]  157 	add	hl, hl
    00000084 09               [ 8]  158 	add	hl, bc
    00000085 29               [ 8]  159 	add	hl, hl
    00000086 29               [ 8]  160 	add	hl, hl
    00000087 4D               [ 4]  161 	ld	c, l
    00000088 44               [ 4]  162 	ld	b, h
    00000089 F8 02            [12]  163 	ldhl	sp,	#2
    0000008B 2A               [ 8]  164 	ld	a,	(hl+)
    0000008C 66               [ 8]  165 	ld	h, (hl)
    0000008D 6F               [ 4]  166 	ld	l, a
    0000008E 09               [ 8]  167 	add	hl, bc
    0000008F 5D               [ 4]  168 	ld	e, l
    00000090 54               [ 4]  169 	ld	d, h
    00000091 01 14 00         [12]  170 	ld	bc, #0x0014
    00000094 C5               [16]  171 	push	bc
    00000095 01r00r00         [12]  172 	ld	bc, #_goblin
    00000098 CDr00r00         [24]  173 	call	___memcpy
                                    174 ;src/encounter.c:31: for (int i = 0; i < monster_num; i++) {
    0000009B F8 04            [12]  175 	ldhl	sp,	#4
    0000009D 34               [12]  176 	inc	(hl)
    0000009E 20 CD            [12]  177 	jr	NZ, 00109$
    000000A0 23               [ 8]  178 	inc	hl
    000000A1 34               [12]  179 	inc	(hl)
    000000A2 18 C9            [12]  180 	jr	00109$
    000000A4                        181 00107$:
                                    182 ;src/encounter.c:35: return monsters;
    000000A4 F8 02            [12]  183 	ldhl	sp,	#2
    000000A6 2A               [ 8]  184 	ld	a, (hl+)
    000000A7 4F               [ 4]  185 	ld	c, a
    000000A8 46               [ 8]  186 	ld	b, (hl)
                                    187 ;src/encounter.c:36: }
    000000A9 E8 06            [16]  188 	add	sp, #6
    000000AB C9               [16]  189 	ret
                                    190 	.area _CODE
                                    191 	.area _INITIALIZER
                                    192 	.area _CABS (ABS)
