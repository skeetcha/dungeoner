                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.4.1 #14650 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module utils
                                      6 	.optsdcc -msm83
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _rand
                                     12 	.globl _roll
                                     13 	.globl _rand_range
                                     14 ;--------------------------------------------------------
                                     15 ; special function registers
                                     16 ;--------------------------------------------------------
                                     17 ;--------------------------------------------------------
                                     18 ; ram data
                                     19 ;--------------------------------------------------------
                                     20 	.area _DATA
                                     21 ;--------------------------------------------------------
                                     22 ; ram data
                                     23 ;--------------------------------------------------------
                                     24 	.area _INITIALIZED
                                     25 ;--------------------------------------------------------
                                     26 ; absolute external ram data
                                     27 ;--------------------------------------------------------
                                     28 	.area _DABS (ABS)
                                     29 ;--------------------------------------------------------
                                     30 ; global & static initialisations
                                     31 ;--------------------------------------------------------
                                     32 	.area _HOME
                                     33 	.area _GSINIT
                                     34 	.area _GSFINAL
                                     35 	.area _GSINIT
                                     36 ;--------------------------------------------------------
                                     37 ; Home
                                     38 ;--------------------------------------------------------
                                     39 	.area _HOME
                                     40 	.area _HOME
                                     41 ;--------------------------------------------------------
                                     42 ; code
                                     43 ;--------------------------------------------------------
                                     44 	.area _CODE
                                     45 ;src/utils.c:5: RollResult roll(unsigned int die_amount, unsigned int die_type, int bonus) {
                                     46 ;	---------------------------------
                                     47 ; Function roll
                                     48 ; ---------------------------------
    00000000                         49 _roll::
    00000000 E8 F8            [16]   50 	add	sp, #-8
    00000002 F8 06            [12]   51 	ldhl	sp,	#6
    00000004 79               [ 4]   52 	ld	a, c
    00000005 22               [ 8]   53 	ld	(hl+), a
    00000006 70               [ 8]   54 	ld	(hl), b
                                     55 ;src/utils.c:7: bool crit_success = false;
    00000007 F8 04            [12]   56 	ldhl	sp,	#4
                                     57 ;src/utils.c:8: bool crit_failure = false;
    00000009 AF               [ 4]   58 	xor	a, a
    0000000A 22               [ 8]   59 	ld	(hl+), a
                                     60 ;src/utils.c:10: for (int i = 0; i < die_amount; i++) {
    0000000B 01 00 00         [12]   61 	ld	bc, #0x0000
    0000000E 71               [ 8]   62 	ld	(hl), c
    0000000F                         63 00110$:
    0000000F 69               [ 4]   64 	ld	l, c
                                     65 ;	spillPairReg hl
                                     66 ;	spillPairReg hl
    00000010 60               [ 4]   67 	ld	h, b
                                     68 ;	spillPairReg hl
                                     69 ;	spillPairReg hl
    00000011 7D               [ 4]   70 	ld	a, l
    00000012 93               [ 4]   71 	sub	a, e
    00000013 7C               [ 4]   72 	ld	a, h
    00000014 9A               [ 4]   73 	sbc	a, d
    00000015 30 29            [12]   74 	jr	NC, 00106$
                                     75 ;src/utils.c:11: unsigned int val = rand_range(1, die_type);
    00000017 C5               [16]   76 	push	bc
    00000018 D5               [16]   77 	push	de
    00000019 F8 0A            [12]   78 	ldhl	sp,	#10
    0000001B 2A               [ 8]   79 	ld	a, (hl+)
    0000001C 4F               [ 4]   80 	ld	c, a
    0000001D 46               [ 8]   81 	ld	b, (hl)
    0000001E 11 01 00         [12]   82 	ld	de, #0x0001
    00000021 CDr8Dr00         [24]   83 	call	_rand_range
    00000024 69               [ 4]   84 	ld	l, c
                                     85 ;	spillPairReg hl
                                     86 ;	spillPairReg hl
    00000025 60               [ 4]   87 	ld	h, b
                                     88 ;	spillPairReg hl
                                     89 ;	spillPairReg hl
    00000026 D1               [12]   90 	pop	de
    00000027 C1               [12]   91 	pop	bc
                                     92 ;src/utils.c:13: if (val == 20) {
    00000028 7D               [ 4]   93 	ld	a, l
    00000029 D6 14            [ 8]   94 	sub	a, #0x14
    0000002B B4               [ 4]   95 	or	a, h
    0000002C 20 06            [12]   96 	jr	NZ, 00104$
                                     97 ;src/utils.c:14: crit_success = true;
    0000002E F8 04            [12]   98 	ldhl	sp,	#4
    00000030 36 01            [12]   99 	ld	(hl), #0x01
    00000032 18 09            [12]  100 	jr	00111$
    00000034                        101 00104$:
                                    102 ;src/utils.c:15: } else if (val == 1) {
    00000034 7D               [ 4]  103 	ld	a, l
    00000035 3D               [ 4]  104 	dec	a
    00000036 B4               [ 4]  105 	or	a, h
    00000037 20 04            [12]  106 	jr	NZ, 00111$
                                    107 ;src/utils.c:16: crit_failure = true;
    00000039 F8 05            [12]  108 	ldhl	sp,	#5
    0000003B 36 01            [12]  109 	ld	(hl), #0x01
    0000003D                        110 00111$:
                                    111 ;src/utils.c:10: for (int i = 0; i < die_amount; i++) {
    0000003D 03               [ 8]  112 	inc	bc
    0000003E 18 CF            [12]  113 	jr	00110$
    00000040                        114 00106$:
                                    115 ;src/utils.c:20: if (bonus > ((int)sum * -1)) {
    00000040 F8 0C            [12]  116 	ldhl	sp,	#12
    00000042 AF               [ 4]  117 	xor	a, a
    00000043 96               [ 8]  118 	sub	a, (hl)
    00000044 23               [ 8]  119 	inc	hl
    00000045 3E 00            [ 8]  120 	ld	a, #0x00
    00000047 9E               [ 8]  121 	sbc	a, (hl)
    00000048 3E 00            [ 8]  122 	ld	a, #0x00
    0000004A 57               [ 4]  123 	ld	d, a
    0000004B 5E               [ 8]  124 	ld	e, (hl)
    0000004C CB 7B            [ 8]  125 	bit	7, e
    0000004E 28 07            [12]  126 	jr	Z, 00154$
    00000050 CB 7A            [ 8]  127 	bit	7, d
    00000052 20 08            [12]  128 	jr	NZ, 00155$
    00000054 BF               [ 4]  129 	cp	a, a
    00000055 18 05            [12]  130 	jr	00155$
    00000057                        131 00154$:
    00000057 CB 7A            [ 8]  132 	bit	7, d
    00000059 28 01            [12]  133 	jr	Z, 00155$
    0000005B 37               [ 4]  134 	scf
    0000005C                        135 00155$:
    0000005C 30 05            [12]  136 	jr	NC, 00108$
                                    137 ;src/utils.c:22: crit_success = false;
    0000005E F8 04            [12]  138 	ldhl	sp,	#4
                                    139 ;src/utils.c:23: crit_failure = false;
    00000060 AF               [ 4]  140 	xor	a, a
    00000061 22               [ 8]  141 	ld	(hl+), a
    00000062 77               [ 8]  142 	ld	(hl), a
    00000063                        143 00108$:
                                    144 ;src/utils.c:27: r.result = sum + bonus;
    00000063 F8 0C            [12]  145 	ldhl	sp,	#12
    00000065 2A               [ 8]  146 	ld	a, (hl+)
    00000066 4F               [ 4]  147 	ld	c, a
    00000067 46               [ 8]  148 	ld	b, (hl)
    00000068 33               [ 8]  149 	inc	sp
    00000069 33               [ 8]  150 	inc	sp
    0000006A C5               [16]  151 	push	bc
                                    152 ;src/utils.c:28: r.crit_success = crit_success;
    0000006B F8 04            [12]  153 	ldhl	sp,	#4
    0000006D 3A               [ 8]  154 	ld	a, (hl-)
    0000006E 2B               [ 8]  155 	dec	hl
    0000006F 77               [ 8]  156 	ld	(hl), a
                                    157 ;src/utils.c:29: r.crit_failure = crit_failure;
    00000070 F8 05            [12]  158 	ldhl	sp,	#5
    00000072 3A               [ 8]  159 	ld	a, (hl-)
    00000073 2B               [ 8]  160 	dec	hl
    00000074 77               [ 8]  161 	ld	(hl), a
                                    162 ;src/utils.c:30: return r;
    00000075 F8 0A            [12]  163 	ldhl	sp,	#10
    00000077 2A               [ 8]  164 	ld	a, (hl+)
    00000078 4F               [ 4]  165 	ld	c, a
    00000079 46               [ 8]  166 	ld	b, (hl)
    0000007A F8 00            [12]  167 	ldhl	sp,	#0
    0000007C 2A               [ 8]  168 	ld	a, (hl+)
    0000007D 02               [ 8]  169 	ld	(bc), a
    0000007E 03               [ 8]  170 	inc	bc
    0000007F 2A               [ 8]  171 	ld	a, (hl+)
    00000080 02               [ 8]  172 	ld	(bc), a
    00000081 03               [ 8]  173 	inc	bc
    00000082 2A               [ 8]  174 	ld	a, (hl+)
    00000083 02               [ 8]  175 	ld	(bc), a
    00000084 03               [ 8]  176 	inc	bc
    00000085 7E               [ 8]  177 	ld	a, (hl)
    00000086 02               [ 8]  178 	ld	(bc), a
                                    179 ;src/utils.c:31: }
    00000087 E8 08            [16]  180 	add	sp, #8
    00000089 E1               [12]  181 	pop	hl
    0000008A E8 04            [16]  182 	add	sp, #4
    0000008C E9               [ 4]  183 	jp	(hl)
                                    184 ;src/utils.c:33: unsigned int rand_range(unsigned int min, unsigned int max) {
                                    185 ;	---------------------------------
                                    186 ; Function rand_range
                                    187 ; ---------------------------------
    0000008D                        188 _rand_range::
                                    189 ;	spillPairReg hl
                                    190 ;	spillPairReg hl
                                    191 ;	spillPairReg hl
                                    192 ;	spillPairReg hl
                                    193 ;src/utils.c:34: return rand() % (max - min) + min;
    0000008D D5               [16]  194 	push	de
    0000008E C5               [16]  195 	push	bc
    0000008F CDr00r00         [24]  196 	call	_rand
    00000092 C1               [12]  197 	pop	bc
    00000093 E1               [12]  198 	pop	hl
    00000094 79               [ 4]  199 	ld	a, c
    00000095 95               [ 4]  200 	sub	a, l
    00000096 4F               [ 4]  201 	ld	c, a
    00000097 78               [ 4]  202 	ld	a, b
    00000098 9C               [ 4]  203 	sbc	a, h
    00000099 47               [ 4]  204 	ld	b, a
    0000009A 16 00            [ 8]  205 	ld	d, #0x00
    0000009C E5               [16]  206 	push	hl
    0000009D CDr00r00         [24]  207 	call	__moduint
    000000A0 E1               [12]  208 	pop	hl
    000000A1 09               [ 8]  209 	add	hl, bc
    000000A2 4D               [ 4]  210 	ld	c, l
    000000A3 44               [ 4]  211 	ld	b, h
                                    212 ;src/utils.c:35: }
    000000A4 C9               [16]  213 	ret
                                    214 	.area _CODE
                                    215 	.area _INITIALIZER
                                    216 	.area _CABS (ABS)
