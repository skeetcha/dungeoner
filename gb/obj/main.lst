                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.4.1 #14650 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -msm83
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _set_door
                                     13 	.globl _initarand
                                     14 	.globl _puts
                                     15 	.globl _printf
                                     16 	.globl _free_dungeon
                                     17 	.globl _generate_dungeon
                                     18 	.globl _init_dungeon
                                     19 	.globl _set_sprite_data
                                     20 	.globl _set_bkg_tiles
                                     21 	.globl _set_bkg_data
                                     22 	.globl _display_off
                                     23 	.globl _vsync
                                     24 	.globl _waitpadup
                                     25 	.globl _waitpad
                                     26 	.globl _joypad
                                     27 	.globl _run
                                     28 	.globl _joypad_last
                                     29 	.globl _joypad_current
                                     30 ;--------------------------------------------------------
                                     31 ; special function registers
                                     32 ;--------------------------------------------------------
                                     33 ;--------------------------------------------------------
                                     34 ; ram data
                                     35 ;--------------------------------------------------------
                                     36 	.area _DATA
                                     37 ;--------------------------------------------------------
                                     38 ; ram data
                                     39 ;--------------------------------------------------------
                                     40 	.area _INITIALIZED
    00000000                         41 _joypad_current::
    00000000                         42 	.ds 2
    00000002                         43 _joypad_last::
    00000002                         44 	.ds 2
    00000004                         45 _run::
    00000004                         46 	.ds 1
                                     47 ;--------------------------------------------------------
                                     48 ; absolute external ram data
                                     49 ;--------------------------------------------------------
                                     50 	.area _DABS (ABS)
                                     51 ;--------------------------------------------------------
                                     52 ; global & static initialisations
                                     53 ;--------------------------------------------------------
                                     54 	.area _HOME
                                     55 	.area _GSINIT
                                     56 	.area _GSFINAL
                                     57 	.area _GSINIT
                                     58 ;--------------------------------------------------------
                                     59 ; Home
                                     60 ;--------------------------------------------------------
                                     61 	.area _HOME
                                     62 	.area _HOME
                                     63 ;--------------------------------------------------------
                                     64 ; code
                                     65 ;--------------------------------------------------------
                                     66 	.area _CODE
                                     67 ;src/main.c:12: void set_door(int direction) {
                                     68 ;	---------------------------------
                                     69 ; Function set_door
                                     70 ; ---------------------------------
    00000000                         71 _set_door::
                                     72 ;src/main.c:13: switch (direction) {
    00000000 7B               [ 4]   73 	ld	a, e
    00000001 D6 04            [ 8]   74 	sub	a, #0x04
    00000003 B2               [ 4]   75 	or	a, d
    00000004 28 13            [12]   76 	jr	Z, 00101$
    00000006 7B               [ 4]   77 	ld	a, e
    00000007 D6 08            [ 8]   78 	sub	a, #0x08
    00000009 B2               [ 4]   79 	or	a, d
    0000000A 28 43            [12]   80 	jr	Z, 00104$
    0000000C 7B               [ 4]   81 	ld	a, e
    0000000D D6 10            [ 8]   82 	sub	a, #0x10
    0000000F B2               [ 4]   83 	or	a, d
    00000010 28 19            [12]   84 	jr	Z, 00102$
    00000012 7B               [ 4]   85 	ld	a, e
    00000013 D6 20            [ 8]   86 	sub	a, #0x20
    00000015 B2               [ 4]   87 	or	a, d
    00000016 28 25            [12]   88 	jr	Z, 00103$
    00000018 C9               [16]   89 	ret
                                     90 ;src/main.c:14: case BIT_DOOR_NORTH:
    00000019                         91 00101$:
                                     92 ;src/main.c:15: set_bkg_tiles(dungeon_north_door_index_x, dungeon_north_door_index_y, 1, 1, door);
    00000019 11r00r00         [12]   93 	ld	de, #_door
    0000001C D5               [16]   94 	push	de
    0000001D 21 01 01         [12]   95 	ld	hl, #0x101
    00000020 E5               [16]   96 	push	hl
    00000021 21 09 01         [12]   97 	ld	hl, #0x109
    00000024 E5               [16]   98 	push	hl
    00000025 CDr00r00         [24]   99 	call	_set_bkg_tiles
    00000028 E8 06            [16]  100 	add	sp, #6
                                    101 ;src/main.c:16: break;
    0000002A C9               [16]  102 	ret
                                    103 ;src/main.c:17: case BIT_DOOR_SOUTH:
    0000002B                        104 00102$:
                                    105 ;src/main.c:18: set_bkg_tiles(dungeon_south_door_index_x, dungeon_south_door_index_y, 1, 1, door);
    0000002B 11r00r00         [12]  106 	ld	de, #_door
    0000002E D5               [16]  107 	push	de
    0000002F 21 01 01         [12]  108 	ld	hl, #0x101
    00000032 E5               [16]  109 	push	hl
    00000033 21 09 0F         [12]  110 	ld	hl, #0xf09
    00000036 E5               [16]  111 	push	hl
    00000037 CDr00r00         [24]  112 	call	_set_bkg_tiles
    0000003A E8 06            [16]  113 	add	sp, #6
                                    114 ;src/main.c:19: break;
    0000003C C9               [16]  115 	ret
                                    116 ;src/main.c:20: case BIT_DOOR_WEST:
    0000003D                        117 00103$:
                                    118 ;src/main.c:21: set_bkg_tiles(dungeon_west_door_index_x, dungeon_west_door_index_y, 1, 1, door);
    0000003D 11r00r00         [12]  119 	ld	de, #_door
    00000040 D5               [16]  120 	push	de
    00000041 21 01 01         [12]  121 	ld	hl, #0x101
    00000044 E5               [16]  122 	push	hl
    00000045 21 02 08         [12]  123 	ld	hl, #0x802
    00000048 E5               [16]  124 	push	hl
    00000049 CDr00r00         [24]  125 	call	_set_bkg_tiles
    0000004C E8 06            [16]  126 	add	sp, #6
                                    127 ;src/main.c:22: break;
    0000004E C9               [16]  128 	ret
                                    129 ;src/main.c:23: case BIT_DOOR_EAST:
    0000004F                        130 00104$:
                                    131 ;src/main.c:24: set_bkg_tiles(dungeon_east_door_index_x, dungeon_east_door_index_y, 1, 1, door);
    0000004F 11r00r00         [12]  132 	ld	de, #_door
    00000052 D5               [16]  133 	push	de
    00000053 21 01 01         [12]  134 	ld	hl, #0x101
    00000056 E5               [16]  135 	push	hl
    00000057 21 10 08         [12]  136 	ld	hl, #0x810
    0000005A E5               [16]  137 	push	hl
    0000005B CDr00r00         [24]  138 	call	_set_bkg_tiles
    0000005E E8 06            [16]  139 	add	sp, #6
                                    140 ;src/main.c:26: }
                                    141 ;src/main.c:27: }
    00000060 C9               [16]  142 	ret
                                    143 ;src/main.c:33: void main(void) {
                                    144 ;	---------------------------------
                                    145 ; Function main
                                    146 ; ---------------------------------
    00000061                        147 _main::
    00000061 E8 F8            [16]  148 	add	sp, #-8
                                    149 ;src/main.c:34: SHOW_BKG;
    00000063 F0r00            [12]  150 	ldh	a, (_LCDC_REG + 0)
    00000065 F6 01            [ 8]  151 	or	a, #0x01
    00000067 E0r00            [12]  152 	ldh	(_LCDC_REG + 0), a
                                    153 ;src/main.c:35: DISPLAY_ON;
    00000069 F0r00            [12]  154 	ldh	a, (_LCDC_REG + 0)
    0000006B F6 80            [ 8]  155 	or	a, #0x80
    0000006D E0r00            [12]  156 	ldh	(_LCDC_REG + 0), a
                                    157 ;src/main.c:36: SHOW_SPRITES;
    0000006F F0r00            [12]  158 	ldh	a, (_LCDC_REG + 0)
    00000071 F6 02            [ 8]  159 	or	a, #0x02
    00000073 E0r00            [12]  160 	ldh	(_LCDC_REG + 0), a
                                    161 ;src/main.c:40: printf("Push any key (1)\n");
    00000075 11r96r01         [12]  162 	ld	de, #___str_1
    00000078 CDr00r00         [24]  163 	call	_puts
                                    164 ;src/main.c:41: waitpad(0xff);
    0000007B 3E FF            [ 8]  165 	ld	a, #0xff
    0000007D CDr00r00         [24]  166 	call	_waitpad
                                    167 ;src/main.c:42: waitpadup();
    00000080 CDr00r00         [24]  168 	call	_waitpadup
                                    169 ;src/main.c:43: seed = DIV_REG;
    00000083 F0r00            [12]  170 	ldh	a, (_DIV_REG + 0)
    00000085 4F               [ 4]  171 	ld	c, a
    00000086 06 00            [ 8]  172 	ld	b, #0x00
                                    173 ;src/main.c:44: printf("Push any key (2)\n");
    00000088 C5               [16]  174 	push	bc
    00000089 11rA7r01         [12]  175 	ld	de, #___str_3
    0000008C CDr00r00         [24]  176 	call	_puts
    0000008F C1               [12]  177 	pop	bc
                                    178 ;src/main.c:45: waitpad(0xff);
    00000090 3E FF            [ 8]  179 	ld	a, #0xff
    00000092 CDr00r00         [24]  180 	call	_waitpad
                                    181 ;src/main.c:46: waitpadup();
    00000095 CDr00r00         [24]  182 	call	_waitpadup
                                    183 ;src/main.c:47: seed |= (UWORD)DIV_REG << 8;
    00000098 F0r00            [12]  184 	ldh	a, (_DIV_REG + 0)
    0000009A 47               [ 4]  185 	ld	b, a
                                    186 ;src/main.c:48: printf("%u", seed);
    0000009B C5               [16]  187 	push	bc
    0000009C C5               [16]  188 	push	bc
    0000009D 11rB8r01         [12]  189 	ld	de, #___str_4
    000000A0 D5               [16]  190 	push	de
    000000A1 CDr00r00         [24]  191 	call	_printf
    000000A4 E8 04            [16]  192 	add	sp, #4
    000000A6 CDr00r00         [24]  193 	call	_initarand
    000000A9 E1               [12]  194 	pop	hl
                                    195 ;src/main.c:51: set_bkg_data(0, 14, dungeon_tiles);
    000000AA 11r00r00         [12]  196 	ld	de, #_dungeon_tiles
    000000AD D5               [16]  197 	push	de
    000000AE 21 00 0E         [12]  198 	ld	hl, #0xe00
    000000B1 E5               [16]  199 	push	hl
    000000B2 CDr00r00         [24]  200 	call	_set_bkg_data
    000000B5 E8 04            [16]  201 	add	sp, #4
                                    202 ;src/main.c:52: set_bkg_tiles(0, 0, dungeon_room_width, dungeon_room_height, dungeon_room);
    000000B7 11r00r00         [12]  203 	ld	de, #_dungeon_room
    000000BA D5               [16]  204 	push	de
    000000BB 21 14 12         [12]  205 	ld	hl, #0x1214
    000000BE E5               [16]  206 	push	hl
    000000BF AF               [ 4]  207 	xor	a, a
    000000C0 0F               [ 4]  208 	rrca
    000000C1 F5               [16]  209 	push	af
    000000C2 CDr00r00         [24]  210 	call	_set_bkg_tiles
    000000C5 E8 06            [16]  211 	add	sp, #6
                                    212 ;src/main.c:55: init_dungeon(&dungeon, 6, 6);
    000000C7 11 06 00         [12]  213 	ld	de, #0x0006
    000000CA D5               [16]  214 	push	de
    000000CB 01 06 00         [12]  215 	ld	bc, #0x0006
    000000CE 21 02 00         [12]  216 	ld	hl, #2
    000000D1 39               [ 8]  217 	add	hl, sp
    000000D2 5D               [ 4]  218 	ld	e, l
    000000D3 54               [ 4]  219 	ld	d, h
    000000D4 CDr00r00         [24]  220 	call	_init_dungeon
                                    221 ;src/main.c:56: generate_dungeon(&dungeon);
    000000D7 21 00 00         [12]  222 	ld	hl, #0
    000000DA 39               [ 8]  223 	add	hl, sp
    000000DB 5D               [ 4]  224 	ld	e, l
    000000DC 54               [ 4]  225 	ld	d, h
    000000DD CDr00r00         [24]  226 	call	_generate_dungeon
                                    227 ;src/main.c:57: uint8_t room = dungeon.grid[dungeon.entrance];
    000000E0 C1               [12]  228 	pop	bc
    000000E1 C5               [16]  229 	push	bc
    000000E2 F8 02            [12]  230 	ldhl	sp,	#2
    000000E4 2A               [ 8]  231 	ld	a, (hl+)
    000000E5 66               [ 8]  232 	ld	h, (hl)
                                    233 ;	spillPairReg hl
                                    234 ;	spillPairReg hl
    000000E6 6F               [ 4]  235 	ld	l, a
                                    236 ;	spillPairReg hl
                                    237 ;	spillPairReg hl
    000000E7 09               [ 8]  238 	add	hl, bc
    000000E8 4E               [ 8]  239 	ld	c, (hl)
                                    240 ;src/main.c:59: if (HAS_NORTH_DOOR(room)) {
    000000E9 79               [ 4]  241 	ld	a, c
    000000EA E6 04            [ 8]  242 	and	a, #0x04
    000000EC D6 04            [ 8]  243 	sub	a, #0x04
    000000EE 20 08            [12]  244 	jr	NZ, 00102$
                                    245 ;src/main.c:60: set_door(BIT_DOOR_NORTH);
    000000F0 C5               [16]  246 	push	bc
    000000F1 11 04 00         [12]  247 	ld	de, #0x0004
    000000F4 CDr00r00         [24]  248 	call	_set_door
    000000F7 C1               [12]  249 	pop	bc
    000000F8                        250 00102$:
                                    251 ;src/main.c:63: if (HAS_WEST_DOOR(room)) {
    000000F8 79               [ 4]  252 	ld	a, c
    000000F9 E6 20            [ 8]  253 	and	a, #0x20
    000000FB D6 20            [ 8]  254 	sub	a, #0x20
    000000FD 20 08            [12]  255 	jr	NZ, 00104$
                                    256 ;src/main.c:64: set_door(BIT_DOOR_WEST);
    000000FF C5               [16]  257 	push	bc
    00000100 11 20 00         [12]  258 	ld	de, #0x0020
    00000103 CDr00r00         [24]  259 	call	_set_door
    00000106 C1               [12]  260 	pop	bc
    00000107                        261 00104$:
                                    262 ;src/main.c:67: if (HAS_EAST_DOOR(room)) {
    00000107 79               [ 4]  263 	ld	a, c
    00000108 E6 08            [ 8]  264 	and	a, #0x08
    0000010A D6 08            [ 8]  265 	sub	a, #0x08
    0000010C 20 08            [12]  266 	jr	NZ, 00106$
                                    267 ;src/main.c:68: set_door(BIT_DOOR_EAST);
    0000010E C5               [16]  268 	push	bc
    0000010F 11 08 00         [12]  269 	ld	de, #0x0008
    00000112 CDr00r00         [24]  270 	call	_set_door
    00000115 C1               [12]  271 	pop	bc
    00000116                        272 00106$:
                                    273 ;src/main.c:71: if (HAS_SOUTH_DOOR(room)) {
    00000116 79               [ 4]  274 	ld	a, c
    00000117 E6 10            [ 8]  275 	and	a, #0x10
    00000119 D6 10            [ 8]  276 	sub	a, #0x10
    0000011B 20 06            [12]  277 	jr	NZ, 00108$
                                    278 ;src/main.c:72: set_door(BIT_DOOR_SOUTH);
    0000011D 11 10 00         [12]  279 	ld	de, #0x0010
    00000120 CDr00r00         [24]  280 	call	_set_door
    00000123                        281 00108$:
                                    282 ;src/main.c:75: set_sprite_data(0, 4*1, rogue_tiles);
    00000123 11r00r00         [12]  283 	ld	de, #_rogue_tiles
    00000126 D5               [16]  284 	push	de
    00000127 3E 04            [ 8]  285 	ld	a, #0x04
    00000129 F5               [16]  286 	push	af
    0000012A 33               [ 8]  287 	inc	sp
    0000012B AF               [ 4]  288 	xor	a, a
    0000012C F5               [16]  289 	push	af
    0000012D 33               [ 8]  290 	inc	sp
    0000012E CDr00r00         [24]  291 	call	_set_sprite_data
    00000131 E8 04            [16]  292 	add	sp, #4
                                    293 ;src/main.c:76: move_metasprite_ex(metasprite, 0, 0, 0, 80, 80);
                                    294 ;/home/cass-forest/Documents/gbdk/include/gb/metasprites.h:160: __current_metasprite = metasprite;
    00000133 21r00r00         [12]  295 	ld	hl, #___current_metasprite
    00000136 36r00            [12]  296 	ld	(hl), #<(_metasprite)
    00000138 23               [ 8]  297 	inc	hl
    00000139 36s00            [12]  298 	ld	(hl), #>(_metasprite)
                                    299 ;/home/cass-forest/Documents/gbdk/include/gb/metasprites.h:161: __current_base_tile = base_tile;
    0000013B 21r00r00         [12]  300 	ld	hl, #___current_base_tile
    0000013E 36 00            [12]  301 	ld	(hl), #0x00
                                    302 ;/home/cass-forest/Documents/gbdk/include/gb/metasprites.h:162: __current_base_prop = base_prop;
    00000140 21r00r00         [12]  303 	ld	hl, #___current_base_prop
    00000143 36 00            [12]  304 	ld	(hl), #0x00
                                    305 ;/home/cass-forest/Documents/gbdk/include/gb/metasprites.h:163: return __move_metasprite(base_sprite, (y << 8) | (uint8_t)x);
    00000145 11 50 50         [12]  306 	ld	de, #0x5050
    00000148 AF               [ 4]  307 	xor	a, a
    00000149 CDr00r00         [24]  308 	call	___move_metasprite
                                    309 ;src/main.c:78: while (run) {
    0000014C                        310 00111$:
    0000014C 21r04r00         [12]  311 	ld	hl, #_run
    0000014F CB 46            [12]  312 	bit	0, (hl)
    00000151 28 26            [12]  313 	jr	Z, 00113$
                                    314 ;src/main.c:79: joypad_current = joypad();
    00000153 CDr00r00         [24]  315 	call	_joypad
    00000156 21r00r00         [12]  316 	ld	hl, #_joypad_current
    00000159 22               [ 8]  317 	ld	(hl+), a
    0000015A 36 00            [12]  318 	ld	(hl), #0x00
                                    319 ;src/main.c:81: if (joypad_current & J_SELECT) {
    0000015C E5               [16]  320 	push	hl
    0000015D 2B               [ 8]  321 	dec	hl
    0000015E CB 76            [12]  322 	bit	6, (hl)
    00000160 E1               [12]  323 	pop	hl
    00000161 28 05            [12]  324 	jr	Z, 00110$
                                    325 ;src/main.c:82: run = false;
    00000163 21r04r00         [12]  326 	ld	hl, #_run
    00000166 36 00            [12]  327 	ld	(hl), #0x00
    00000168                        328 00110$:
                                    329 ;src/main.c:85: vsync();
    00000168 CDr00r00         [24]  330 	call	_vsync
                                    331 ;src/main.c:86: joypad_last = joypad_current;
    0000016B FAr00r00         [16]  332 	ld	a, (#_joypad_current)
    0000016E EAr02r00         [16]  333 	ld	(#_joypad_last),a
    00000171 FAr01r00         [16]  334 	ld	a, (#_joypad_current + 1)
    00000174 EAr03r00         [16]  335 	ld	(#_joypad_last + 1),a
    00000177 18 D3            [12]  336 	jr	00111$
    00000179                        337 00113$:
                                    338 ;src/main.c:89: HIDE_BKG;
    00000179 F0r00            [12]  339 	ldh	a, (_LCDC_REG + 0)
    0000017B E6 FE            [ 8]  340 	and	a, #0xfe
    0000017D E0r00            [12]  341 	ldh	(_LCDC_REG + 0), a
                                    342 ;src/main.c:90: DISPLAY_OFF;
    0000017F CDr00r00         [24]  343 	call	_display_off
                                    344 ;src/main.c:91: free_dungeon(&dungeon);
    00000182 21 00 00         [12]  345 	ld	hl, #0
    00000185 39               [ 8]  346 	add	hl, sp
    00000186 5D               [ 4]  347 	ld	e, l
    00000187 54               [ 4]  348 	ld	d, h
    00000188 CDr00r00         [24]  349 	call	_free_dungeon
                                    350 ;src/main.c:92: printf("Game closed.");
    0000018B 11rBBr01         [12]  351 	ld	de, #___str_5
    0000018E D5               [16]  352 	push	de
    0000018F CDr00r00         [24]  353 	call	_printf
    00000192 E1               [12]  354 	pop	hl
                                    355 ;src/main.c:93: }
    00000193 E8 08            [16]  356 	add	sp, #8
    00000195 C9               [16]  357 	ret
    00000196                        358 ___str_1:
    00000196 50 75 73 68 20 61 6E   359 	.ascii "Push any key (1)"
             79 20 6B 65 79 20 28
             31 29
    000001A6 00                     360 	.db 0x00
    000001A7                        361 ___str_3:
    000001A7 50 75 73 68 20 61 6E   362 	.ascii "Push any key (2)"
             79 20 6B 65 79 20 28
             32 29
    000001B7 00                     363 	.db 0x00
    000001B8                        364 ___str_4:
    000001B8 25 75                  365 	.ascii "%u"
    000001BA 00                     366 	.db 0x00
    000001BB                        367 ___str_5:
    000001BB 47 61 6D 65 20 63 6C   368 	.ascii "Game closed."
             6F 73 65 64 2E
    000001C7 00                     369 	.db 0x00
                                    370 	.area _CODE
                                    371 	.area _INITIALIZER
    00000000                        372 __xinit__joypad_current:
    00000000 00 00                  373 	.dw #0x0000
    00000002                        374 __xinit__joypad_last:
    00000002 00 00                  375 	.dw #0x0000
    00000004                        376 __xinit__run:
    00000004 01                     377 	.db #0x01	;  1
                                    378 	.area _CABS (ABS)
